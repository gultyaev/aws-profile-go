service: aws-profile-go
frameworkVersion: '3'

custom:
  collectionsTableName: 'collections-table'
  usersTableName: 'users-table'
  remover:
    buckets:
      - ImagesBucket

provider:
  name: aws
  runtime: go1.x
  region: eu-west-1
  environment:
    COLLECTION_TABLE: ${self:custom.collectionsTableName}
    USERS_TABLE: ${self:custom.usersTableName}
    SALT: 0da7092f262da23f22e377d4d7db1cd7cf64bafee0c40fc9
    USERNAME: TEST
    PASSWORD: PASSWORD
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ CollectionsTable, Arn ]
            - Fn::GetAtt: [ UsersTable, Arn ]
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource:
            - Fn::GetAtt: [ ImagesBucket, Arn ]
            - Fn::Join: [ "", [ Fn::GetAtt: [ ImagesBucket, Arn ], "*" ] ]

package:
  patterns:
    - '!./**'
    - ./bin/**

plugins:
  - serverless-offline
  - serverless-resources-env

functions:
  # Skills functions
  get-skills:
    handler: bin/get-skills
    events:
      - http:
          path: /skills
          method: get
          cors: true
  save-skills:
    handler: bin/save-skills
    events:
      - http:
          path: /skills
          method: post
          cors: true
          authorizer: authorizer
          request:
            schemas:
              application/json: ${file(validation-schemas/save-skills.validation.json)}

  # Profile functions
  get-profile:
    handler: bin/get-profile
    events:
      - http:
          path: /profile
          method: get
          cors: true
  save-profile:
    handler: bin/save-profile
    events:
      - http:
          path: /profile
          method: post
          cors: true
          authorizer: authorizer
          request:
            schemas:
              application/json: ${file(validation-schemas/save-profile.validation.json)}

  # Languages functions
  get-languages:
    handler: bin/get-languages
    events:
      - http:
          path: /languages
          method: get
          cors: true
  save-languages:
    handler: bin/save-languages
    events:
      - http:
          path: /languages
          method: post
          authorizer: authorizer
          cors: true
          request:
            schemas:
              application/json: ${file(validation-schemas/save-strings-collection.validation.json)}

  # Educations functions
  get-educations:
    handler: bin/get-educations
    events:
      - http:
          path: /educations
          method: get
          cors: true
  save-educations:
    handler: bin/save-educations
    events:
      - http:
          path: /educations
          method: post
          cors: true
          authorizer: authorizer
          request:
            schemas:
              application/json: ${file(validation-schemas/save-strings-collection.validation.json)}

  # Projects functions
  get-projects:
    handler: bin/get-projects
    events:
      - http:
          path: /projects
          method: get
          cors: true
  save-projects:
    handler: bin/save-projects
    events:
      - http:
          path: /projects
          method: post
          cors: true
          authorizer: authorizer
          request:
            schemas:
              application/json: ${file(validation-schemas/save-projects.validation.json)}

  # Presigned url
  get-presigned-url:
    handler: bin/get-presigned-url
    dependsOn:
      - ImagesBucket
    custom:
      env-resources:
        - ImagesBucket
    events:
      - http:
          path: /image
          method: get
          cors: true
          authorizer: authorizer
          response:
            headers:
              Access-Control-Allow-Origin: "*"
          request:
            parameters:
              querystrings:
                image: true

  # Authorizer
  authorizer:
    handler: bin/authorizer

resources:
  Resources:
    # A special table which can contain any entities that don't need to have a separate collection
    #
    # - profile
    # - get-skills
    # - languages
    # - educations
    # - projects
    CollectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: Collection
            AttributeType: S
        KeySchema:
          - AttributeName: Collection
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.collectionsTableName}
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: Username
            AttributeType: S
        KeySchema:
          - AttributeName: Username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.usersTableName}
    ImagesBucket:
      Type: AWS::S3::Bucket
    PublicImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ImagesBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:GetObject'
              Resource:
                - !Join [ '/', [ !GetAtt [ ImagesBucket, Arn ], '*' ] ]
              Principal: '*'

    Unauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        ResponseType: "DEFAULT_4XX"
        RestApiId:
          Ref: "ApiGatewayRestApi"

    ServerError:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        ResponseType: "DEFAULT_5XX"
        RestApiId:
          Ref: "ApiGatewayRestApi"
