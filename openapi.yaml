openapi: 3.0.3
info:
  title: Go profile API
  version: 0.0.1

servers:
  - url: https://q37jrwzos8.execute-api.eu-west-1.amazonaws.com/dev/

paths:
  /image:
    get:
      security:
        - basic: [ ]
      tags:
        - image
      summary: Returns a URL to upload image to
      description: Pass the "image" query param with the name of the image you will upload.
        It will return two URLs. One is used to upload the image using PUT request,
        and the second one is to use to access the image from the browser.
      parameters:
        - in: query
          name: image
          required: true
          schema:
            type: string
            example: Hello%20World.png
      responses:
        '200':
          description: Signed URL created
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadUrl:
                    type: string
                    example: http://aws.com/ima
                    description: Destination path which is used to upload the image to
                  url:
                    type: string
                    description: URL by which the uploaded image then can be accessed to download
        '401':
          $ref: '#/components/responses/Unauthorized'


  /profile:
    get:
      tags:
        - profile
      summary: Returns profile info
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'

    post:
      security:
        - basic: [ ]
      tags:
        - profile
      summary: Saves profile info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '201':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCreated'
        '401':
          $ref: '#/components/responses/Unauthorized'


  /skills:
    get:
      tags:
        - get-skills
      summary: Returns get-skills
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
    post:
      security:
        - basic: [ ]
      tags:
        - get-skills
      summary: Saves get-skills
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Skill'
      responses:
        '201':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCreated'
        '401':
          $ref: '#/components/responses/Unauthorized'


  /languages:
    get:
      tags:
        - languages
      summary: Returns languages
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 'English B2+'
                  minLength: 2
    post:
      security:
        - basic: [ ]
      tags:
        - languages
      summary: Saves languages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: 'English B2+'
                minLength: 2
      responses:
        '201':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCreated'
        '401':
          $ref: '#/components/responses/Unauthorized'


  /educations:
    get:
      tags:
        - educations
      summary: Returns education
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 'Master degree'
                  minLength: 2
    post:
      security:
        - basic: [ ]
      tags:
        - educations
      summary: Saves education
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                example: 'Master degree'
                minLength: 2
      responses:
        '201':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCreated'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /projects:
    get:
      tags:
        - projects
      summary: Returns projects
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      security:
        - basic: [ ]
      tags:
        - projects
      summary: Saves projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCreated'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:


    Profile:
      type: object
      required:
        - name
        - location
        - contacts
      properties:
        name:
          type: string
          minLength: 3
          example: 'John Doe'
        location:
          type: string
          minLength: 3
          example: 'Some ave'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        profileImg:
          type: string
          example: 'http://path/to/image.png'
          minLength: 3


    Contact:
      type: object
      required:
        - type
        - value
      properties:
        type:
          type: string
          minLength: 1
          example: phone
        value:
          type: string
          minLength: 3
          example: '+000000000'


    Skill:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 2
          example: 'JavaScript'


    Project:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: 'Board'
          minLength: 2
        description:
          type: string
          example: 'In this project I have ...'
          minLength: 2
        imageUrl:
          type: string
          example: 'http://link/to/image.png'
          minLength: 2
        links:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                example: 'path/to/github'
                minLength: 2
              type:
                type: string
                description: 'Can be use to specify type of a link to display it in different places'
                example: 'github'
                minLength: 2

    ItemCreated:
      type: object
      properties:
        message:
          type: string
          example: Created

    AuthError:
      type: object
      properties:
        message:
          type: string
      required:
        - code
        - message

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthError'

  securitySchemes:
    basic:
      type: http
      scheme: basic
